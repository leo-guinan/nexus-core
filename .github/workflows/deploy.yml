name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push RTMP server
        uses: docker/build-push-action@v5
        with:
          context: ./apps/rtmp-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rtmp:latest

      - name: Build and push WebSocket server
        uses: docker/build-push-action@v5
        with:
          context: ./apps/websocket-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket:latest

    
      - name: Generate production docker-compose
        run: |
          cat > docker-compose.prod.yml << 'EOL'
          services:
            traefik:
              image: traefik:v2.10
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - /opt/rtmp-host/traefik:/etc/traefik
              environment:
                - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
                - CF_DNS_API_TOKEN=${CLOUDFLARE_API_KEY}
                - CF_ZONE_API_TOKEN=${CLOUDFLARE_API_KEY}
              command:
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
                - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
                - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
                - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
                - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
                - "--certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}"
                - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
                - "--log.level=DEBUG"
                - "--api.dashboard=true"
                - "--api.insecure=false"
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.dashboard.rule=Host(`traefik.core.maketheinternetweirdagain.com`)"
                - "traefik.http.routers.dashboard.service=api@internal"
                - "traefik.http.routers.dashboard.entrypoints=websecure"
                - "traefik.http.routers.dashboard.tls=true"
                - "traefik.http.routers.dashboard.tls.certresolver=cloudflare"
                - "traefik.http.routers.dashboard.middlewares=auth"
                - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
              restart: unless-stopped

            rtmp:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rtmp:latest
              ports:
                - "1935:1935"
              environment:
                - GLADIA_API_KEY=${GLADIA_API_KEY}
                - WEBHOOK_URL=http://websocket:8000/webhook
                - DATABASE_URL=${DATABASE_URL}
              depends_on:
                - websocket
              restart: unless-stopped

            websocket:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket:latest
              expose:
                - "8000"
              environment:
                - PORT=8000
                - DATABASE_URL=${DATABASE_URL}
                - MASTRA_API_URL=http://mastra:3001
                - GOOGLE_APPLICATION_CREDENTIALS=/apps/websocket-server/credentials/service-account.json
                - CHROMA_API_KEY=${CHROMA_API_KEY}
                - CHROMA_HOST=${CHROMA_HOST}
                - CHROMA_DATABASE=${CHROMA_DATABASE}
                - CHROMA_TENANT=${CHROMA_TENANT}
                - GOOGLE_CLOUD_BUCKET_NAME=${GOOGLE_CLOUD_BUCKET_NAME}  
                - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.websocket.rule=Host(`ws.core.maketheinternetweirdagain.com`)"
                - "traefik.http.routers.websocket.entrypoints=websecure"
                - "traefik.http.routers.websocket.tls=true"
                - "traefik.http.routers.websocket.tls.certresolver=cloudflare"
                - "traefik.http.services.websocket.loadbalancer.server.port=8000"
              restart: unless-stopped          

            migrations:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket:latest
              command: python -m alembic upgrade head
              environment:
                - DATABASE_URL=${DATABASE_URL}
              restart: "no"

          networks:
            default:
              name: rtmp-network
          EOL

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "docker-compose.prod.yml,.env.example"
          target: "/opt/rtmp-host"
          strip_components: 0

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/rtmp-host
            
            # Stop and remove existing containers
            docker compose -f docker-compose.prod.yml down || true
            
            # Remove any orphaned containers using these ports
            for port in 80 443 1935; do
              container_id=$(docker ps -q --filter "publish=$port")
              if [ ! -z "$container_id" ]; then
                docker stop $container_id
                docker rm $container_id
              fi
            done
            
            # Clean up unused networks
            docker network prune -f
            
            # Create Traefik directory and touch acme.json with correct permissions
            mkdir -p traefik
            touch traefik/acme.json
            chmod 600 traefik/acme.json
            
            # Generate htpasswd for Traefik dashboard without newline
            TRAEFIK_AUTH=$(echo '${{ secrets.TRAEFIK_PASSWORD }}' | docker run --rm --stdin httpd:2.4-alpine htpasswd -nbB admin - | tr -d '\n')
            
            # Set up environment (careful with quoting)
            cat << 'EOF' > .env
            GLADIA_API_KEY=${{ secrets.GLADIA_API_KEY }}
            CLOUDFLARE_EMAIL=${{ secrets.CLOUDFLARE_EMAIL }}
            CLOUDFLARE_API_KEY=${{ secrets.CLOUDFLARE_API_KEY }}
            DOMAIN_NAME=core.maketheinternetweirdagain.com
            TRAEFIK_AUTH=${TRAEFIK_AUTH}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            EOF
            
            # Replace the TRAEFIK_AUTH placeholder with actual value
            sed -i "s|\${TRAEFIK_AUTH}|${TRAEFIK_AUTH}|g" .env
            
            # Debug: Show .env file structure without sensitive data
            echo "Checking .env file structure (redacted values):"
            sed 's/=.*/=REDACTED/' .env
            
            # Pull new images
            docker compose -f docker-compose.prod.yml pull
            
            # Run migrations first
            echo "Running database migrations..."
            docker compose -f docker-compose.prod.yml run --rm migrations
            
            # Start all services
            docker compose -f docker-compose.prod.yml up -d