name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push RTMP server
        uses: docker/build-push-action@v5
        with:
          context: ./apps/rtmp-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rtmp:latest

      - name: Build and push WebSocket server
        uses: docker/build-push-action@v5
        with:
          context: ./apps/websocket-server
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket:latest

      - name: Build and push Web app
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest

      - name: Generate production docker-compose
        run: |
          cat > docker-compose.prod.yml << EOL
          services:
            traefik:
              image: traefik:v2.10
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
                - /opt/rtmp-host/traefik:/etc/traefik
              environment:
                - CLOUDFLARE_EMAIL=\${CLOUDFLARE_EMAIL}
                - CLOUDFLARE_API_KEY=\${CLOUDFLARE_API_KEY}
              command:
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
                - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
                - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
                - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
                - "--certificatesresolvers.cloudflare.acme.email=\${CLOUDFLARE_EMAIL}"
                - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
                - "--api.dashboard=true"
                - "--api.insecure=false"
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.dashboard.rule=Host(\`traefik.\${DOMAIN_NAME}\`)"
                - "traefik.http.routers.dashboard.service=api@internal"
                - "traefik.http.routers.dashboard.entrypoints=websecure"
                - "traefik.http.routers.dashboard.tls=true"
                - "traefik.http.routers.dashboard.tls.certresolver=cloudflare"
                - "traefik.http.routers.dashboard.middlewares=auth"
                - "traefik.http.middlewares.auth.basicauth.users=\${TRAEFIK_AUTH}"
              restart: unless-stopped

            rtmp:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rtmp:latest
              ports:
                - "1935:1935"
              environment:
                - GLADIA_API_KEY=\${GLADIA_API_KEY}
                - WEBHOOK_URL=http://websocket:8000/webhook
              depends_on:
                - websocket
              restart: unless-stopped

            websocket:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/websocket:latest
              expose:
                - "8000"
              environment:
                - PORT=8000
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.websocket.rule=Host(\`ws.\${DOMAIN_NAME}\`)"
                - "traefik.http.routers.websocket.entrypoints=websecure"
                - "traefik.http.routers.websocket.tls=true"
                - "traefik.http.routers.websocket.tls.certresolver=cloudflare"
                - "traefik.http.services.websocket.loadbalancer.server.port=8000"
              restart: unless-stopped

            web:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:latest
              expose:
                - "3000"
              environment:
                - NEXT_PUBLIC_WS_URL=wss://ws.\${DOMAIN_NAME}/ws/transcription
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.web.rule=Host(\`\${DOMAIN_NAME}\`)"
                - "traefik.http.routers.web.entrypoints=websecure"
                - "traefik.http.routers.web.tls=true"
                - "traefik.http.routers.web.tls.certresolver=cloudflare"
                - "traefik.http.services.web.loadbalancer.server.port=3000"
              depends_on:
                - websocket
              restart: unless-stopped

          networks:
            default:
              name: rtmp-network
          EOL

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          source: "docker-compose.prod.yml,.env.example"
          target: "/opt/rtmp-host"
          strip_components: 0

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USERNAME }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/rtmp-host
            
            # Stop and remove existing containers
            docker compose -f docker-compose.prod.yml down || true
            
            # Remove any orphaned containers using these ports
            for port in 80 443 1935; do
              container_id=$(docker ps -q --filter "publish=$port")
              if [ ! -z "$container_id" ]; then
                docker stop $container_id
                docker rm $container_id
              fi
            done
            
            # Clean up unused networks
            docker network prune -f
            
            # Create Traefik directory and touch acme.json with correct permissions
            mkdir -p traefik
            touch traefik/acme.json
            chmod 600 traefik/acme.json
            
            # Generate htpasswd for Traefik dashboard
            echo ${{ secrets.TRAEFIK_PASSWORD }} | docker run --rm httpd:2.4-alpine htpasswd -nbB admin - > traefik/htpasswd
            TRAEFIK_AUTH=$(cat traefik/htpasswd)
            
            # Set up environment
            cat > .env << EOF
            GLADIA_API_KEY=${{ secrets.GLADIA_API_KEY }}
            CLOUDFLARE_EMAIL=${{ secrets.CLOUDFLARE_EMAIL }}
            CLOUDFLARE_API_KEY=${{ secrets.CLOUDFLARE_API_KEY }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            TRAEFIK_AUTH=$TRAEFIK_AUTH
            EOF
            
            # Pull and start new containers
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d